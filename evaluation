import numpy as np


def evaluate_grasp(box1, box2, angles_true, angles_pre):
     correct = 0
     failed = 0
     for s in range(len(box1[0])):
        for i in range(40):
            for j in range(40):
                if not np.all(box1[s,i,j,:]==0):
                    box1[s,i,j,0] -= 4+i*8  #left
                    box1[s,i,j,1] += 4+i*8  #top
                    box1[s,i,j,2] += 4+i*8  #right
                    box1[s,i,j,3] -= 4+i*8  #down
                    box2[s,i,j,0] -= 4+i*8  #left
                    box2[s,i,j,1] += 4+i*8  #top
                    box2[s,i,j,2] += 4+i*8  #right
                    box2[s,i,j,3] -= 4+i*8  #down
                    in_h = min(box1[s,i,j,3], box2[s,i,j,3]) - max(box1[s,i,j,1], box2[s,i,j,1])
                    in_w = min(box1[s,i,j,2], box2[s,i,j,2]) - max(box1[s,i,j,0], box2[s,i,j,0])
        
                    inter = 0 if in_h < 0 or in_w < 0 else in_h * in_w
                    union = (box1[s,i,j,3] - box1[s,i,j,1]) * (box1[s,i,j,2] - box1[s,i,j,0]) + \
                    (box2[s,i,j,3] - box2[s,i,j,1]) * (box2[s,i,j,2] - box2[s,i,j,0]) - inter
        # calculate IoU
                    iou = inter / union

                    max_true = np.argmax(angles_true[s,i,j,:])
                    max_pre = np.argmax(angles_pre[s,i,j,:])
                    angles_diff = abs(max_true - max_pre)
                    if angles_diff <=3 and iou>=0.25:
                        correct += 1
                    else:
                        failed += 1
        return correct,failed
