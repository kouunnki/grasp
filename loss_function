import numpy as np
from dataprocessing import *

def loss_function(box1, box2, w_xy, angles_true, angles_pre):
    for s in range(box1.shape[0]):

        Npos = 0
        L_reg_sum = 0
        Lcls_sum = 0
        for i in range(40):
            for j in range(40):
                if not np.all(box1[s,i,j,:]==0):
                    Npos += 1
                    left1 = box1[s,i,j,0] + 4+i*8  #left
                    top1 = box1[s,i,j,1] + 4+i*8  #top
                    right1 = box1[s,i,j,2] + 4+i*8  #right
                    down1 = box1[s,i,j,3] + 4+i*8  #down
                    left2 = box2[s,i,j,0] + 4+i*8  #left
                    top2 = box2[s,i,j,1] + 4+i*8  #top
                    right2 = box2[s,i,j,2] + 4+i*8  #right
                    down2 = box2[s,i,j,3] + 4+i*8  #down
                    in_h = min(down1, down2) - max(top1, top2)
                    in_w = min(right1, right2) - max(left1, left2)
        
                    inter = 0 if in_h < 0 or in_w < 0 else in_h * in_w
                    union = (down1 - top1) * (right1 - left1) + \
                    (down2 - top2) * (right2- left2) - inter
        # calculate IoU
                    iou = inter / union
        # calculate diagonal
                    x1,y1,x2,y2 = box1[s,i,j,:4] 
                    x3,y3,x4,y4 = box2[s,i,j,:4]
                    C = np.sqrt((max(x1,x2,x3,x4)-min(x1,x2,x3,x4))**2 + \
                    (max(y1,y2,y3,y4)-min(y1,y2,y3,y4))**2)
        # calculate distance of center point
                    point_1 = ((x2+x1)/2, (y2+y1)/2)
                    point_2 = ((x4+x3)/2, (y4+y3)/2)
                    D = np.sqrt((point_2[0]-point_1[0])**2 + \
                    (point_2[1]-point_1[1])**2)
        # calculate DIOU
                    lens = D**2 / C**2
                    diou = iou - lens

                    L_reg = (1-diou)*w_xy[s,i,j]
                    L_reg_sum += L_reg

                    for k in range(18):
                        if angles_true[s,i,j,k] == 1:
                            Lcls = 0.25*((1-angles_pre[s,i,j,k])**2)*np.log(angles_pre[s,i,j,k])
                        else:  
                            Lcls = 0.75*((angles_pre[s,i,j,k])**2)*np.log(1-angles_pre[s,i,j,k])
                        Lcls_sum += Lcls
                    Lcls_sum = -Lcls_sum
                Lcls_sum += Lcls_sum
        Lcls = Lcls_sum/Npos
        L_reg = 2/Npos*L_reg_sum
        L = Lcls + L_reg
    L += L
    return L
